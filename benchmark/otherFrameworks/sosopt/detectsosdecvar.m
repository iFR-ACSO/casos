function [D,z] = detectsosdecvar(p,x)
% function [D,z] = detectsosdecvar(p,x)
%
% DESCRIPTION 
%   This function attempts to determine if the polynomial p(x,d) was
%   generated using SOSDECVAR. It checks if p has the form 
%   p(x,d) = z(x)'*D*z(x) where D is a symmetric matrix of pvars.
%
% INPUTS 
%   p: 1-by-1 polynomial.
%   x: N-by-1 column vector of pvars.
%
% OUTPUTS
%   D: If p was generated by SOSDECVAR then D is an Nz-by-Nz matrix 
%        of pvars. Otherwise D is empty.
%   z: If p was generated by SOSDECVAR then z is an Nz-by-1 column 
%       vector of monomials. Otherwise z is empty.
%
% SYNTAX
%   [D,z] = detectsosdecvar(p,x)
%
% See also sosdecvar

%  PJS 4/25/2009  Initial Coding
%  PJS 12/07/2009 This is an updated version of the old polydecvar syntax
%  PJS 10/28/2010 Update function name to detectsosdecvar

% Initialize Output
D=[];
z=[];
         
% Get polynomial and variable info
pcoef = p.coefficient;
if any( pcoef(:)~=1 &  pcoef(:)~=2 )
    return;
end
pdeg =  p.degmat;
pvar = p.varname;
ntp = size(pdeg,1);
if isa(x,'polynomial')
    xvar = x.varname;
else
    xvar = x;
end

% Split out d/x vars and get the deg mats associated with each
[dvar,didx] = setdiff(pvar,xvar);
ddeg = pdeg(:,didx);
[xvar,xidx] = setdiff(pvar,dvar);
xdeg = pdeg(:,xidx);
Nx = length(xvar);
if isempty(dvar)
    return;
end

% Find the candidate z(x) dimension and the coefficient string
idx = strfind(dvar{1},'_');
Nz = ( sqrt(1+8*length(dvar))-1 )/2;
if abs( Nz - round(Nz) )>1e-8 || ( length(idx)<2 && Nz~=1 )
    return;
else
    Nz = round(Nz);
end
if Nz==1
    % MPVAR/SOSDECVAR does not use indexing notation when D is 1-by-1
    dstr = dvar{1};
else
    % MPVAR/SOSDECVAR use double indexing when D is m-by-n  (m,n>1)
    dstr = dvar{1}(1:idx(end-1)-1);
end
if isempty(dstr)
    return;
end

% Find the candidate monomials in z(x) 
zdeg = zeros(Nz,Nx);
for i1=1:Nz
    if Nz==1
        idx1 = 1;
    else
        idx1 = strmatch([dstr '_' int2str(i1) '_' int2str(i1)], dvar, 'exact');
    end
    idx2 = find( ddeg(:,idx1) );
    if length(idx2)==1
        zdeg(i1,:) = xdeg(idx2,:)/2;
    else        
        return;
    end    
end
if all( floor(zdeg) == ceil(zdeg) )
    z = polynomial(speye(Nz),zdeg,xvar,[Nz 1]);
else
    return
end
    
% Generate test poly with sosdecvar
[t,D,z] = sosdecvar(dstr,z);

% Test the proposed decomposition
if ~isequal(p-t,polynomial(0))
    % Our assumed decomposition was not valid
    D=[];z=[];
    return;
end    

